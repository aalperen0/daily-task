// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const authenticateUser = `-- name: AuthenticateUser :many
SELECT email, password FROM users
WHERE email = $1 AND password = $2
`

type AuthenticateUserParams struct {
	Email    string
	Password string
}

type AuthenticateUserRow struct {
	Email     string
	Password  string
	ID        uuid.UUID
	CreatedAt time.Time
}

func (q *Queries) AuthenticateUser(ctx context.Context, arg AuthenticateUserParams) ([]AuthenticateUserRow, error) {
	rows, err := q.db.QueryContext(ctx, authenticateUser, arg.Email, arg.Password)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthenticateUserRow
	for rows.Next() {
		var i AuthenticateUserRow
		if err := rows.Scan(&i.Email, &i.Password); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createUser = `-- name: CreateUser :one

INSERT INTO users(id, name, email, password, created_at)
VALUES($1, $2, $3, $4, $5)
RETURNING id, name, email, password, created_at
`

type CreateUserParams struct {
	ID        uuid.UUID
	Name      string
	Email     string
	Password  string
	CreatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUserById = `-- name: DeleteUserById :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserById, id)
	return err
}

const getIdOfUser = `-- name: GetIdOfUser :one
SELECT id FROM users WHERE email = $1
`

func (q *Queries) GetIdOfUser(ctx context.Context, email string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getIdOfUser, email)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, password, created_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const updateUserById = `-- name: UpdateUserById :exec
UPDATE users
SET name = $2,
email = $3,
password = $4
WHERE id = $1
`

type UpdateUserByIdParams struct {
	ID       uuid.UUID
	Name     string
	Email    string
	Password string
}

func (q *Queries) UpdateUserById(ctx context.Context, arg UpdateUserByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserById,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}
