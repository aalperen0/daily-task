// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tasks.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTasks = `-- name: CreateTasks :one
INSERT INTO tasks(id, user_id, title, description, due_date, status, created_at, updated_at)
VALUES($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, user_id, title, description, due_date, status, created_at, updated_at
`

type CreateTasksParams struct {
	ID          uuid.UUID
	UserID      uuid.UUID
	Title       string
	Description string
	DueDate     sql.NullTime
	Status      sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) CreateTasks(ctx context.Context, arg CreateTasksParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTasks,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTaskByTaskId = `-- name: DeleteTaskByTaskId :exec
DELETE FROM tasks
USING users
WHERE tasks.user_id = users.id AND tasks.id = $1
`

func (q *Queries) DeleteTaskByTaskId(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTaskByTaskId, id)
	return err
}

const deleteTaskOfUser = `-- name: DeleteTaskOfUser :exec
DELETE FROM tasks
USING users
WHERE tasks.user_id = users.id AND users.id = $1
`

func (q *Queries) DeleteTaskOfUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTaskOfUser, id)
	return err
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, user_id, title, description, due_date, status, created_at, updated_at FROM tasks
WHERE tasks.id = $1
`

func (q *Queries) GetTaskById(ctx context.Context, id uuid.UUID) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTaskById, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTaskOfUser = `-- name: GetTaskOfUser :many
SELECT tasks.title, tasks.description, tasks.status, tasks.due_date
FROM tasks
JOIN users ON tasks.user_id = users.id
WHERE users.id = $1
`

type GetTaskOfUserRow struct {
	Title       string
	Description string
	Status      sql.NullString
	DueDate     sql.NullTime
}

func (q *Queries) GetTaskOfUser(ctx context.Context, id uuid.UUID) ([]GetTaskOfUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getTaskOfUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTaskOfUserRow
	for rows.Next() {
		var i GetTaskOfUserRow
		if err := rows.Scan(
			&i.Title,
			&i.Description,
			&i.Status,
			&i.DueDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskOfUser = `-- name: UpdateTaskOfUser :exec
UPDATE tasks
SET description = $2,
    title = $3,
    due_date = $4,
    status = $5,
    updated_at = $6
WHERE tasks.id = $1
`

type UpdateTaskOfUserParams struct {
	ID          uuid.UUID
	Description string
	Title       string
	DueDate     sql.NullTime
	Status      sql.NullString
	UpdatedAt   sql.NullTime
}

func (q *Queries) UpdateTaskOfUser(ctx context.Context, arg UpdateTaskOfUserParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskOfUser,
		arg.ID,
		arg.Description,
		arg.Title,
		arg.DueDate,
		arg.Status,
		arg.UpdatedAt,
	)
	return err
}
